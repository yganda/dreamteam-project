{"version":3,"sources":["actions/loginActions.js","reducers/loginReducer.jsx","reducers/index.jsx","components/Button/Button.jsx","components/MainHeader/MainHeader.jsx","components/App/index.jsx","components/App/App.jsx","serviceWorker.js","index.jsx"],"names":["LOGIN_ACTION_TYPES","initialState","something","rootReducer","combineReducers","login","state","action","type","Button","children","disabled","color","COLORS","BLUE","rest","classes","clsx","className","DARK","GREEN","MainHeader","App","dispatch","useDispatch","onClick","Boolean","window","location","hostname","match","composeEnhancers","composeWithDevTools","createLogger","collapsed","logErrors","store","createStore","applyMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"ySACaA,EACK,iBCCZC,EAAe,CACnBC,WAAW,GCDAC,EAAcC,0BAAgB,CACzCC,MDG0B,WAAmC,IAAlCC,EAAiC,uDAAzBL,EAAcM,EAAW,uCAC5D,OAAQA,EAAOC,MACb,KAAKR,EAEL,QACE,OAAOM,M,sCEPAG,EAAS,SAATA,EAAU,GAKhB,IAJLC,EAII,EAJJA,SAII,IAHJC,gBAGI,aAFJC,aAEI,MAFIH,EAAOI,OAAOC,KAElB,EADDC,EACC,+CACEC,EAAUC,YAAK,SAAD,kBAAsBL,GAAS,CACjD,mBAAoBD,IAGtB,OACE,4CAAYI,EAAZ,CAAkBG,UAAWF,EAASL,SAAUA,IAC7CD,IAKPD,EAAOI,OAAS,CACdC,KAAM,OACNK,KAAM,OACNC,MAAO,SCrBT,IAIaC,EAAa,WACxB,OACE,yBAAKH,UAAU,cACb,yBAAKA,UAAU,mBACb,0BAAMA,UAAU,yBAChB,yBAAKA,UAAU,wBATP,SAWV,yBAAKA,UAAU,oBACb,0BAAMA,UAAU,yBAXR,WAYR,yBAAKA,UAAU,yBACb,kBAAC,EAAD,CAAQN,MAAM,QAZN,eCJHU,ECKH,SAAC,GAAgB,IAAfZ,EAAc,EAAdA,SACNa,EAAWC,cAEjB,OACE,yBAAKN,UAAU,OACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,qBACZR,EACD,kBAAC,EAAD,CAAQe,QAAU,kBAAMF,ENVA,CAC9Bf,KAAMR,MMSA,kBCHY0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRN,IAAMC,EAAmBC,8BAAoB,IAE9BC,uBAAa,CAC1BC,WAAW,EACXC,WAAW,IAQb,IAAMC,EAAQC,sBACZlC,EACA4B,EACEO,kBAAe,WAAf,EARe,MAYnBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUL,MAAOA,GACf,kBAAC,EAAD,QAGJM,SAASC,eAAe,SDgGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.564fba09.chunk.js","sourcesContent":["//example\nexport const LOGIN_ACTION_TYPES = {\n  BUTTON_CLICKED: 'BUTTON_CLICKED',\n};\n\nexport const checkUser = () => ({\n  type: LOGIN_ACTION_TYPES.BUTTON_CLICKED\n});\n","// example\nimport { LOGIN_ACTION_TYPES } from '../actions/loginActions';\n\nconst initialState = {\n  something: false,\n};\n\nexport const loginReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case LOGIN_ACTION_TYPES.BUTTON_CLICKED:\n      return state;\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from 'redux';\nimport { loginReducer } from './loginReducer';\n\nexport const rootReducer = combineReducers({\n  login: loginReducer,\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Button.scss';\nimport clsx from 'clsx';\n\nexport const Button = ({\n  children,\n  disabled = false,\n  color = Button.COLORS.BLUE,\n  ...rest\n}) => {\n  const classes = clsx(\"button\", `button--${color}`, {\n    \"button--disabled\": disabled,\n  });\n\n  return (\n    <button {...rest} className={classes} disabled={disabled}>\n      {children}\n    </button>\n  );\n};\n\nButton.COLORS = {\n  BLUE: \"blue\",\n  DARK: \"dark\",\n  GREEN: \"green\",\n};\n\nButton.propTypes = {\n  disabled: PropTypes.bool,\n  children: PropTypes.string,\n  color: PropTypes.oneOf([...Object.values(Button.COLORS)]),\n};\n","import React from 'react';\nimport './MainHeader.scss';\nimport { Button } from '../Button/Button';\n\nconst LogoTxt = 'Logo';\nconst JoinTxt = 'Join Us';\nconst ButtonTxt = 'Sign In';\n\nexport const MainHeader = () => {\n  return (\n    <div className=\"mainHeader\">\n      <div className=\"mainHeader-logo\">\n        <span className=\"mainHeader-logo--img\" />\n        <div className=\"mainHeader-logo--txt\">{LogoTxt}</div>\n      </div>\n      <div className=\"mainHeader-logIn\">\n        <span className=\"mainHeader-logIn--txt\">{JoinTxt}</span>\n        <div className=\"mainHeader-logIn--btn\">\n          <Button color=\"blue\" >{ButtonTxt}</Button>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import App from './App';\n\nexport default App;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport './App.scss';\nimport { MainHeader } from '../MainHeader'; \nimport { Button } from '../Button';\nimport { checkUser } from '../../actions/loginActions';\n\nconst App = ({children}) => {\n  const dispatch = useDispatch();\n\n  return (\n    <div className=\"App\">\n      <MainHeader/>\n      <div className=\"childrenContainer\">\n        {children}\n        <Button onClick={ () => dispatch(checkUser())}>Test Action</Button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware } from 'redux'\nimport { Provider } from 'react-redux'\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { createLogger } from 'redux-logger';\nimport { rootReducer } from './reducers';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nconst composeEnhancers = composeWithDevTools({});\n\nconst logger = createLogger({\n  collapsed: true,\n  logErrors: false,\n});\n\nconst middleware = [];\nif (process.env.NODE_ENV === 'development') {\n  middleware.push(logger);\n}\n\nconst store = createStore(\n  rootReducer,\n  composeEnhancers(\n    applyMiddleware(...middleware),\n  )\n);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}